#!/usr/bin/perl -w
# <copyright here>
#
# Print stellar data for Java consumption.
#
# Usage:
#
#   tools/generate-star-data > unhaze/src/main/res/xml/stars.xml
#
# HYGv3 catalog is used for raw data. It will be downloaded and cached as "hygdata_v3.csv"
# in the current directory.

use diagnostics;
use strict;
use warnings;

use LWP::UserAgent;

my $progname = $0; $progname =~ s@.*/@@g;

sub get_hygdata() {
  if (!-e "hygdata_v3.csv") {
    print STDERR "hygdata_v3.csv missing, downloading...\n";
    my $uri = "https://raw.githubusercontent.com/astronexus/HYG-Database/master/hygdata_v3.csv";
    my $ua = LWP::UserAgent->new(ssl_opts => { verify_hostname => 0 });
    my $r = $ua->get($uri, ":content_file" => "hygdata_v3.csv");
    if ($r->is_error) {
      error("failed to fetch HYG data");
    }
    print STDERR "hygdata_v3.csv cached locally\n";
  }
  open(my $fh, "<", "hygdata_v3.csv") or error("failed to open hygdata_v3.csv");
  return $fh;
}

sub error($) {
  my ($err) = @_;
  print STDERR "$progname: $err\n";
  exit 1;
}

sub usage(;$) {
  my ($err) = @_;
  print STDERR "$progname: $err\n" if $err;
  print STDERR "usage: $progname\n";
  exit ($err ? 1 : 0);
}

sub main() {
  while ($#ARGV >= 0) {
    $_ = shift @ARGV;
    if (m/^-(-?help|h)$/) { usage(); }
    else { usage("unknown: $_"); }
  }

  print <<END;
<?xml version="1.0" encoding="utf-8"?>
<!-- THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT DIRECTLY -->
<!-- Please tweak or rerun "tools/generate-stellar-data" to update this file. -->
<stars>
END

  my $count = 0;

  my $hyg = get_hygdata();
  my %fields;
  while (my $line = <$hyg>) {
    # Learn field names
    if ($. == 1) {
      my @names = split(",", $line);
      for my $i (0..$#names) {
        $fields{$names[$i]} = $i;
      }
    }
    # Skip the name line and the next one for the Sun
    next if ($. <= 2);

    my @star   = split(",", $line);

    my $hip    = $star[$fields{"hip"}];
    my $ra     = $star[$fields{"rarad"}];
    my $dec    = $star[$fields{"decrad"}];
    my $pmra   = $star[$fields{"pmrarad"}];
    my $pmdec  = $star[$fields{"pmdecrad"}];
    my $dist   = $star[$fields{"dist"}];
    my $mag    = $star[$fields{"mag"}];
    my $spect  = $star[$fields{"spect"}];
    my $bayer  = $star[$fields{"bayer"}];
    my $flam   = $star[$fields{"flam"}];
    my $con    = $star[$fields{"con"}];

    next if $mag > 6;

    $hip  = "0" if $hip  eq "";

    print <<END;
<star>
  <hipparcosNumber>$hip</hipparcosNumber>
  <rightAscension>$ra</rightAscension>
  <rightAscensionDeltaPerYear>$pmra</rightAscensionDeltaPerYear>
  <declination>$dec</declination>
  <declinationDeltaPerYear>$pmdec</declinationDeltaPerYear>
  <distance>$dist</distance>
  <magnitude>$mag</magnitude>
  <spectralClass>$spect</spectralClass>
  <bayerName>$bayer</bayerName>
  <flamsteedName>$flam</flamsteedName>
  <constellation>$con</constellation>
</star>
END
    $count++;
  }

  print <<END;
</stars>
END

  print STDERR "output $count stars\n";
}

main();
exit 0;
